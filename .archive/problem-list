6 拖拽问题
  具有样式“-webkit-app-region: drag;”的元素，支持通过拖拽以调整窗口位置，且同时失去检测到鼠标事件的能力，产生的问题：
  √6.1 在该区域的按钮和form等子元素，需要鼠标事件，故无法正常工作：通过加入样式“-webkit-app-region: no-drag;”来排除
  √6.2 虽然通过给整个html加鼠标拖拽时间，成功阻止外部拖入的实际效果，但“-webkit-app-region: no-drag;”区域的图标显示为
      可以拖拽（实际无效果），感觉也奇怪。通过修改传递给ondragover方法的e事件的属性“e.dataTransfer.dropEffect = 'none'”
      来达到目的
  6.3 该区域无法成为其他元素“失去焦点”动作的触发源，如需要点击该区域使得上下文右键菜单消失就可能，显得很奇怪
    6.3.1 外部也无法成为触发源
    6.3.2 通过vue的blur事件设置的元素可以让外部成为触发源，但调整窗口大小时却不能触发

√5 框架控制器问题
  关闭按钮的颜色状态异常：
  当右键关闭窗口后再打开，仍然显示
  解决思路：
  5.1 click事件改为mousedown
  5.2 后台渲染/显示前渲染
  试验后均不行，最终采用添加更多类控制点击后的颜色，然后鼠标进入后恢复动画控制，中途又
  最终里面采用了定时器解决问题，根据定时器时间，有小概率再现，故忽略，不再完美100%解决

4 需要去掉窗口的过渡动画
  窗口创建选项：thickFrame为false时，窗口最小化和恢复的动画消失，窗口阴影消失，但最大化还原被禁用

√3 需要完美解决任务栏右键关闭窗口造成的问题
  添加window.onbeforeunload事件，阻止默认行为，并调用窗口隐藏。托盘退出时发送消息

√2 无边框并设置拖拽区域后产生的问题
  由于拖拽区与无法响应鼠标点击事件，则有一系列副作用，如边缘无法被拖拽用来调整窗口大小,无法捕捉按键

√1 外部文件或者URL连接拖入窗口后会自动打开
  该问题会严重影响系统设计封闭性
  尝试了多种方法，均为找到解决方案：
  思路：
  1.1 electron自身的屏蔽方法：主线程、渲染线程、事件、窗口、窗口内容...
  1.2 chrome自身屏蔽方法
  1.3 DOM自身屏蔽方法
  最终发现是HTML5自身特性故采用了1.3的方法（之前也用过，只不过事件函数写错了，囧~~~）