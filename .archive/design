1 设备状态
  状态                      显示按钮              状态跳转
  ----------------------------------------------------------------------------------------------------------------------
  停止                      三角形（主色）              转为“启动”状态
  启动（检查参数+连接设备） 双半圆箭头旋转图表（灰）    若成功，则转为“连接服务器”状态；若失败，则退回“停止”状态
  连接服务器                连接服务器图标（灰）        若成功，则转为“运行”状态；若失败，则转到“重连服务器”状态
  运行                      心跳倒计时环（绿）          正常情况下的常态
                            里面有心形图标（灰）
                            心跳时图标变红并跳动
  重连服务器                连接服务器图标（红）        周期性重连服务器，直到连接上为止，转为“运行”状态
  停止中                    双半圆箭头旋转图表（红）    停止工作完成后，转为“停止”状态
  ----------------------------------------------------------------------------------------------------------------------

  停止按钮：鼠标浮动在其上时才显示（覆盖当前图表）
  以上控制按钮，在设备列表区域和设备内容区域，均使用相同组件
  设备状态批量控制：在设备列表区域添加全部启动和全部停止按钮
  上述所有状态信息+通讯信息，均以流水形式展现在监控区域，最后一条信息，在设备列表区域和设备内容区域，均要有显示

2 前后端分离问题
  一般情况下，应该使得前后端的设计分离，各司其职。简言之，前端仅仅是数据和状态的展示，以及用户的输入；所有数据状态维护、
  业务流程处理等  功能都应该发生在后端。删除前端，除了看不能直接看到数据和状态之外，所有逻辑都应改维持现有的模式，继续运行下去。

  由于既不是一般的传统的BS模式（只是采用了BS的部分概念和技术）也不能套用CS模式的概念，如果依据上述原则开，
  则会导致前后端的数据和状态的同步过于繁琐，易出错；  且前端除了数据和状态的展示外，还承担大量的数据输入和操作的工作，
  可以说，此处是前后端一体的单机模式。

  故为了便利性：数据的维护和响应模型的完成，放在前端进行；后端作为关键模型服务的提供者，被动受前端的控制，以及实现部分自动化业务。
  前后端配合，高效、简介、清晰的完成该软件的设计目标。
